// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.DocumentGeneration.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InternalClient.
    /// </summary>
    internal static partial class InternalClientExtensions
    {
            /// <summary>
            /// Requests document generation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Identifier of Logic subscription.
            /// </param>
            /// <param name='request'>
            /// Document generation parameters.
            /// </param>
            public static DocumentGenerationRequest RequestDocumentGeneration(this IInternalClient operations, System.Guid subscriptionId, GenerateDocumentRequest request = default(GenerateDocumentRequest))
            {
                return operations.RequestDocumentGenerationAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requests document generation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Identifier of Logic subscription.
            /// </param>
            /// <param name='request'>
            /// Document generation parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DocumentGenerationRequest> RequestDocumentGenerationAsync(this IInternalClient operations, System.Guid subscriptionId, GenerateDocumentRequest request = default(GenerateDocumentRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestDocumentGenerationWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets document generation request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Identifier of Logic subscription.
            /// </param>
            /// <param name='requestId'>
            /// Identifier of request to return.
            /// </param>
            public static DocumentGenerationRequest GetDocumentGeneration(this IInternalClient operations, System.Guid subscriptionId, System.Guid requestId)
            {
                return operations.GetDocumentGenerationAsync(subscriptionId, requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets document generation request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Identifier of Logic subscription.
            /// </param>
            /// <param name='requestId'>
            /// Identifier of request to return.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DocumentGenerationRequest> GetDocumentGenerationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDocumentGenerationWithHttpMessagesAsync(subscriptionId, requestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets URI to document generated for provided request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Identifier of Logic subscription.
            /// </param>
            /// <param name='requestId'>
            /// Identifier of request which document should be retuned.
            /// </param>
            public static DocumentUri GetDocument(this IInternalClient operations, System.Guid subscriptionId, System.Guid requestId)
            {
                return operations.GetDocumentAsync(subscriptionId, requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets URI to document generated for provided request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Identifier of Logic subscription.
            /// </param>
            /// <param name='requestId'>
            /// Identifier of request which document should be retuned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DocumentUri> GetDocumentAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDocumentWithHttpMessagesAsync(subscriptionId, requestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all templates.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Identifier of Logic subscription.
            /// </param>
            /// <param name='configurationId'>
            /// Identifier of configuration to use.
            /// </param>
            /// <param name='hierarchyPath'>
            /// The hierarchy of possible template sources not including the master
            /// location.
            /// For example, if you have a customer "A0001" with a department "B0001" then
            /// the hierarchy path would be "A0001\B0001".
            /// If the department has no template source configured then the customers
            /// templates will be used.
            /// </param>
            /// <param name='subject'>
            /// Subject of created document.
            /// </param>
            public static IList<Template> GetTemplates(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string hierarchyPath = default(string), string subject = default(string))
            {
                return operations.GetTemplatesAsync(subscriptionId, configurationId, hierarchyPath, subject).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all templates.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Identifier of Logic subscription.
            /// </param>
            /// <param name='configurationId'>
            /// Identifier of configuration to use.
            /// </param>
            /// <param name='hierarchyPath'>
            /// The hierarchy of possible template sources not including the master
            /// location.
            /// For example, if you have a customer "A0001" with a department "B0001" then
            /// the hierarchy path would be "A0001\B0001".
            /// If the department has no template source configured then the customers
            /// templates will be used.
            /// </param>
            /// <param name='subject'>
            /// Subject of created document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Template>> GetTemplatesAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, string hierarchyPath = default(string), string subject = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTemplatesWithHttpMessagesAsync(subscriptionId, configurationId, hierarchyPath, subject, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
